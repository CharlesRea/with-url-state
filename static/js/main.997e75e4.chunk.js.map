{"version":3,"sources":["App.tsx","registerServiceWorker.ts","index.tsx"],"names":["SearchForm","react_default","a","createElement","withUrlState","initialState","name","render","_ref","urlState","setUrlState","placeholder","onChange","e","target","value","style","paddingBottom","paddingLeft","paddingRight","paddingTop","marginBottom","withAsync","producer","fetch","concat","then","r","json","_ref2","error","isLoading","result","results","map","character","key","url","padding","MapRegion","lat","lng","zoom","_ref3","Map","center","Number","onViewportChanged","_ref4","_ref4$center","Object","slicedToArray","height","width","TileLayer","attribution","ColorPicker","color","enhance","props","className","backgroundColor","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","example","_ref5","Fragment","App_SearchForm","App_MapRegion","document","getElementById","URL","process","toString","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.997e75e4.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer } from 'react-leaflet'\nimport { Async } from 'with-async'\nimport { withUrlState, UrlStateProps, UrlState } from 'with-url-state'\nimport 'leaflet/dist/leaflet.css'\nimport './App.css'\n\ntype SearchResults = {\n  count: number\n  results: Array<{\n    name: string\n    height: string\n    url: string\n  }>\n}\n\nconst characterSearch = (name: string): Promise<SearchResults> =>\n  fetch(`https://swapi.co/api/people/?search=${name}`).then(r => r.json())\n\ntype FormState = { name: string }\nexport const SearchForm = () => (\n  <UrlState<FormState>\n    initialState={{ name: 'Skywalker' }}\n    render={({ urlState, setUrlState }) => (\n      <div>\n        <input\n          placeholder=\"Search\"\n          onChange={e => setUrlState({ name: e.target.value })}\n          style={{\n            paddingBottom: 5,\n            paddingLeft: 10,\n            paddingRight: 10,\n            paddingTop: 5,\n            marginBottom: 20,\n          }}\n          value={urlState.name}\n        />\n        <Async\n          producer={() => characterSearch(urlState.name)}\n          render={({ error, isLoading, result }) => (\n            <div>\n              {isLoading && <p>Loading</p>}\n              {result != null &&\n                result.results.map(character => (\n                  <div\n                    key={character.url}\n                    style={{\n                      padding: 10,\n                    }}\n                  >\n                    {character.name}\n                  </div>\n                ))}\n            </div>\n          )}\n        />\n      </div>\n    )}\n  />\n)\n\ntype MapState = { lat: string; lng: string; zoom: string }\nexport const MapRegion = () => (\n  <UrlState<MapState>\n    initialState={{ lat: '51.45999681055091', lng: '-2.583847045898438', zoom: '12' }}\n    render={({ urlState, setUrlState }) => (\n      <div>\n        <Map\n          center={{ lat: Number(urlState.lat), lng: Number(urlState.lng) }}\n          onViewportChanged={({ center: [lat, lng], zoom }: any) =>\n            setUrlState({ lat, lng, zoom })\n          }\n          zoom={Number(urlState.zoom)}\n          style={{\n            height: 800,\n            width: 600,\n          }}\n        >\n          <TileLayer\n            attribution={`&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`}\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </Map>\n      </div>\n    )}\n  />\n)\n\ntype ColorState = { color: string }\nconst enhance = withUrlState<ColorState, {}>(() => ({ color: 'blue' }))\nexport const ColorPicker = enhance((props: UrlStateProps<ColorState>) => (\n  <div className=\"UrlForm\" style={{ backgroundColor: props.urlState.color }}>\n    <div className=\"current-state\">\n      <div>{props.urlState.color}</div>\n    </div>\n    <div className=\"color-buttons\">\n      <button className=\"Red\" onClick={() => props.setUrlState({ color: 'red' })}>\n        Red\n      </button>\n      <button className=\"Green\" onClick={() => props.setUrlState({ color: 'green' })}>\n        Green\n      </button>\n      <button className=\"Blue\" onClick={() => props.setUrlState({ color: 'blue' })}>\n        Blue\n      </button>\n    </div>\n  </div>\n))\n\ntype ExampleState = { example: 'map' | 'form' | 'color' }\nexport default () => (\n  <UrlState<ExampleState>\n    initialState={{ example: 'color' }}\n    render={({ urlState, setUrlState }) => (\n      <>\n        <div className=\"example-buttons\">\n          <button\n            className={urlState.example === 'color' ? 'active' : ''}\n            onClick={() => setUrlState({ example: 'color' })}\n          >\n            Color Picker\n          </button>\n          <button\n            className={urlState.example === 'form' ? 'active' : ''}\n            onClick={() => setUrlState({ example: 'form' })}\n          >\n            Search form\n          </button>\n          <button\n            className={urlState.example === 'map' ? 'active' : ''}\n            onClick={() => setUrlState({ example: 'map' })}\n          >\n            Map\n          </button>\n        </div>\n        {urlState.example === 'color' && <ColorPicker />}\n        {urlState.example === 'form' && <SearchForm />}\n        {urlState.example === 'map' && <MapRegion />}\n      </>\n    )}\n  />\n)\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString())\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available please refresh.' message in your web app.\n                console.log('New content is available please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nrender(<App />, document.getElementById('root') as HTMLElement)\n\nregisterServiceWorker()\n"],"sourceRoot":""}